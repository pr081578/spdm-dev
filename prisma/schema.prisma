// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Platform Tables

// Clients Tables - [BEGINS]
model User {
  // Located Indentification
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  name     String
  role     RoleType @default(BASIC)
  image    String?
  // One To Many Relations - Many
  Owner    Owner?
  Host     Host?
  // Creation and Update
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Host {
  // Located Indentification
  id String @id @default(uuid())
  // Metrics and Attributes

  // One To Many Relations - (Many Side)
  User              User            @relation(fields: [userId], references: [id])
  userId            String          @unique
  PhysicalAddress   PhysicalAddress @relation(fields: [physicalAddressId], references: [id], onDelete: Cascade)
  physicalAddressId String
  // One To Many Relations - (One Side)
  Vehicles          Vehicle[]
  HostCharge        HostCharge[]
  // One To One Relations 
  HostInsurance     HostInsurance?
  // Creation and Update
  createAt          DateTime        @default(now())
  updateAt          DateTime        @updatedAt
}

model Owner {
  // Located Indentification
  id                String          @id @default(uuid())
  // One To Many Relations - (Many Side)
  User              User            @relation(fields: [userId], references: [id])
  userId            String          @unique
  PhysicalAddress   PhysicalAddress @relation(fields: [physicalAddressId], references: [id])
  physicalAddressId String
  // One To Many Relations - (One Side)
  Vehicles          Vehicle[]
  // Creation and Update
  createAt          DateTime        @default(now())
  updateAt          DateTime        @updatedAt
}

// Clients Tables - [ENDS]

// General Users Dependencies Tables - [BEGINS]
enum RoleType {
  BASIC
  ADMIN
}

model PhysicalAddress {
  // Located Indentification
  id       String    @id @default(uuid())
  address  String
  city     String
  state    String
  country  String
  zipCode  String
  // One To Many Relations - (One Side)
  Physical Vehicle[] @relation("Physical")
  Deliver  Vehicle[] @relation("Deliver")
  Receive  Vehicle[] @relation("Receive")
  Hosts    Host[]
  Owners   Owner[]

  // Addition Attributes to Table
  @@unique([address, city, state, country, zipCode])
}

// General User Dependencies Tables - [ENDS]

// Host Only Dependencies Tables - [BEGINS]
enum HostInsuranceType {
  INTERIOR
  EXTERIOR
}

model HostInsurance {
  // Located Indentification
  id          String            @id @default(uuid())
  // Metrics and Attributes
  type        HostInsuranceType @default(INTERIOR)
  // One To One Relations
  Host        Host              @relation(fields: [hostId], references: [id])
  hostId      String            @unique
  // One To Many Relations - (One Side)
  uploadFiles String[]
  // Creation and Update
  createAt    DateTime          @default(now())
  updateAt    DateTime          @updatedAt
}

// Host Only Dependencies Tables - [ENDS]

// Asset Flow Tables - [BEGINS]
enum CarSharingType {
  TURO
  GETAROUND
  HYERCAR
}

model Vehicle {
  // Located Indentification
  id                 String           @id @default(uuid())
  // Registration and Vin/Register state 
  vin                String           @unique
  make               String
  model              String
  trim               String
  year               Int
  registrationNumber String
  city               String
  state              String
  country            String
  zipCode            String
  // Metrics and Attributes
  mileage            Int
  vuel               String
  gasGrade           String
  cityMPG            Int
  hwyMPG             Int
  driveTrain         String
  seatCount          Int
  // Details Information
  description        String
  color              String
  // One To One Relations
  Owner              Owner            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            String
  Host               Host?            @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId             String?
  PhysicalAddress    PhysicalAddress  @relation("Physical", fields: [physicalAddressId], references: [id])
  physicalAddressId  String
  DeliverAddress     PhysicalAddress  @relation("Deliver", fields: [deliverAddressId], references: [id])
  deliverAddressId   String
  ReceiveAddress     PhysicalAddress  @relation("Receive", fields: [receiveAddressId], references: [id])
  receiveAddressId   String
  // One To Many Relations - (One Side)
  HostCharges        HostCharge[]
  Reservation        Reservation[]
  // Creation and Update
  createAt           DateTime         @default(now())
  updateAt           DateTime         @updatedAt
  VehicleFeatures    VehicleFeature[]
}

model GuestRequest {
  // Located Indentification
  id           String              @id @default(uuid())
  // Metrics and Attributes
  firstName    String
  lastName     String
  email        String
  phoneNumber  String
  isVerified   Boolean
  guestPhotos  UploadGuestPhoto[]
  // One To Many Relations - (One Side)
  Reservations CarsharingRequest[]
  price        Float
  // Creation and Update
  createAt     DateTime            @default(now())
  updateAt     DateTime            @updatedAt
}

model Reservation {
  // Located Indentification
  id                            String                   @id @default(uuid())
  // Metrics and Attributes
  deliverAt                     DateTime
  returnAt                      DateTime
  license                       String
  beforeMilage                  Int
  beforeFuelLevel               FuelLevelType
  afterMilage                   Int
  afterFuelLevel                FuelLevelType
  hostHasConfirmed              Boolean
  ownerHasConfirmed             Boolean
  // One To One Relations
  Vehicle                       Vehicle?                 @relation(fields: [vehicleId], references: [id])
  vehicleId                     String?                  @unique
  CarSharingRequest             CarsharingRequest        @relation(fields: [carSharingRequestId], references: [id])
  carSharingRequestId           String                   @unique
  PlatformCharge                PlatformCharge           @relation(fields: [platformChargeId], references: [id])
  platformChargeId              String                   @unique
  // One To Many Relations - (One Side)
  beforeUploadReservationPhotos UploadReservationPhoto[] @relation("BeforePhotos")
  afterUploadReservationPhotos  UploadReservationPhoto[] @relation("AfterPhotos")
  // Creation and Update
  createAt                      DateTime                 @default(now())
  updateAt                      DateTime                 @updatedAt
}

model CarsharingRequest {
  // Located Indentification
  id              String         @id @default(uuid())
  type            CarSharingType
  deliverAt       DateTime
  returnAt        DateTime
  deliverAddress  String
  receiveAddress  String
  requestApproved Boolean        @default(false)
  // One To Many Relations - (Many Side)
  GuestRequest    GuestRequest   @relation(fields: [guestRequestId], references: [id])
  guestRequestId  String
  // One To Many Relations - (One Side)
  Reservation     Reservation?
  // Creation and Update
  createAt        DateTime       @default(now())
  updateAt        DateTime       @updatedAt
}

// Asset Flow Tables - [ENDS]

// Vehicle Only Dependencies Tables - [BEGINS]
enum FuelLevelType {
  EMPTY
  ONEFORTH
  HALF
  THREEFORTH
  FULL
}

model Feature {
  // Located Indentification
  id              String           @id @default(uuid())
  name            String           @unique
  // One To Many Relations - (One Side)
  VehicleFeatures VehicleFeature[]
  // Creation and Update
  createAt        DateTime         @default(now())
  updateAt        DateTime         @updatedAt
}

model VehicleFeature {
  // One To Many Relations - (Many Side)
  Vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String
  Feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  @@id([vehicleId, featureId])
}

// Vehicle Only Dependencies Tables - [ENDS]

// Host & Vehicle Dependencies Tables - [BEGINS]
model HostCharge {
  // Located Indentification
  id        String   @id @default(uuid())
  name      String
  price     Float
  // One To One Relations
  Host      Host?    @relation(fields: [hostId], references: [id])
  hostId    String
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String
  // Creation and Update
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@unique([vehicleId, hostId, name])
}

model UploadReservationPhoto {
  // Located Indentification
  id                  String       @id @default(uuid())
  fileName            String       @unique
  // One To Many Relations - (Many Side)
  BeforeReservation   Reservation? @relation("BeforePhotos", fields: [beforeReservationId], references: [id])
  beforeReservationId String?
  afferReservation    Reservation? @relation("AfterPhotos", fields: [afterReservationId], references: [id])
  afterReservationId  String?
  // Creation and Update
  createAt            DateTime     @default(now())
  updateAt            DateTime     @updatedAt
}

// Host & Vehicle Dependencies Tables - [ENDS]

// Guest Request Dependencies Tables - [BEGINS]
model UploadGuestPhoto {
  // Located Indentification
  id             String       @id @default(uuid())
  fileName       String       @unique
  // One To Many Relations - (Many Side)
  GuestRequest   GuestRequest @relation(fields: [guestRequestId], references: [id])
  guestRequestId String
  // Creation and Update
  createAt       DateTime     @default(now())
  updateAt       DateTime     @updatedAt
}

// Guest Request Dependencies Tables - [ENDS]

// Platform General Tables - [BEGINS]
model PlatformCharge {
  // Located Indentification
  id          String       @id @default(uuid())
  percentage  Float
  price       Float
  // One To One Relations - (One Side)
  Reservation Reservation?
  // Creation and Update
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
}
